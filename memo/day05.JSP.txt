
 1. 페이지 이동
  1-1. forward
	- request에 담긴 값이 유효하다. ( request , response 가 유지된다.)
	- 이동된 url이 화면에 안보인다. ( 사용자는 이동했는지 알 수 없음 )
	- forward 하는 방법
		내장 객체 사용 -> pageContext.forward ( " 이동할 페이지 " ) 
		액션 태그 사용 -> < jsp:forward page = " 이동할 페이지 " / >

  1-2. redirect
	- 클라이언트가 새로 페이지를 요청한 것과 같은 방식으로 페이지가 이동됨.
	( request, response 가 유지되지 않는다. 새로 만들어짐)
	- 이동된 url이 화면에 보인다.
	- redirect 하는 방법
		-> response.sendRedirect ( " 이동할페이지 " );


 2. attribute scope
	- page		: 페이지 내에서 지역변수처럼 사용
	- request		: 요청을 받아 웹 브라우저에게 응답 할 때 까지 변수가 유지되는 경우
	- session		: 웹 브라우저별 변수가 관리되는 경우 사용
	- application	: 웹 어플리케이션이 시작되고 종료 될 때 까지 변수가 유지되는 경우


 3. MVC 패턴
  3-1. MVC패턴
	- M : Model
		-> 사용자가 원하는 데이터나 정보를 제공
		-> 애플리케이션의 정보, 데이터를 나타낸다.
		-> 이러한 data 정보들의 가공을 책임지는 영역을 말한다.

	- V : View
		-> 보여지는 화면
		-> input 텍스트, 체크박스 항목 등과 같은 사용자의 인터페이스 요소를 나타낸다. 데이터 및 객체의 입력, 그리고 보여주는 출력을 담당한다.
		-> 데이터를 기반으로 사용자들이 볼 수 있는 화면이다.
	- C : Controller
		-> 사용자의 요청을 처리하고, 그 요청에 따른 전체적인 흐름 제어
		-> 데이터와 사용자인터페이스 요소들을 잇는 다리역할을 한다.


  3-2. MVC model1 ( MVC1 )
	- MVC1 패턴의 경우 View와 Controller를 모두 JSP가 담당하는 형태를 가진다. 즉, JSP 하나로 유저의 요청을 받고 응답을 처리하므로 구현의 난이도는 쉽다.
	- 단순한 프로젝트에는 괜찮겠지만, 내용이 복잡하고 거대해질수록 이 패턴은 힘을 잃는다. 즉 유지보수에 있어서 문제가 발생한다.

  3-3. MVC model2 ( MVC2 )
	- MVC2패턴은 널리 표준으로 사용하는 패턴입니다.
	- 요청을 하나의 컨트롤러 ( Servlet )가 먼저 받는다. 즉, MVC1과는 다르게 Controller, View가 분리되어 있다.
	- 따라서 역할이 분리되어 MVC1 패턴에서의 단점을 보완 할 수 있다.
	- 그러므로 개발자는 M, V, C 중에서 수정해야 할 부분이 있다면, 그것만 꺼내어 수정하면 된다.














