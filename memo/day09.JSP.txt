
 1. DBCP
  1-1. DBCP ( DataBase Connection Pool)
	- 데이터베이스와 연결된 커넥션을 미리 만들어서 저장해두고 있다가 필요 할 때 저장된 공간(pool)에서 가져다 쓰고 반환하는 기법.
	- 커넥션 풀을 이용하고 커넥션을 미리 만들어두고 사용하기 때문에 매번 사용자가 요청 할 경우 드라이버를 로드하고, 커넥션 객체를 생성해 연결하는 비효율적인 작업을 하지 않아도 된다.
	- 즉 데이터베이스 부하를 줄일 수 있고 효율적으로 관리 할 수 있다.

  1-2. JNDI ( Java Naming and Directory Interface )
	- 디렉토리 서비스에서 제공하는 데이터 및 객체를 발견하고 참고하기 위한 자바 API
	- 즉, DB Pool을 미리 Naming 시켜두는 방법 ( DB 연결 방법 중 하나 )
	- 우리가 저장해 놓은 WAS의 데이터베이스 정보에 JNDI를 설정해 놓으면 웹 어플리케이션은 JNDI만 호출하면 간단해진다.

  1-3. JNDI 사용 이유
	- 개발을 한 사람과 실제 서비스를 운영하는 사람은 다른 경우가 많기 때문에 소스 레벨에서 설정되어 있는 것보다 WAS에서 설정되어 있는 것을 선호한다.


  ---------사용 예시-------
 해당 서버 > context.xml > 아래쪽에 
<Resource 
		name="jdbc/oracle"
		auth="Container"
		type="javax.sql.DataSource"  
		driverClassName="oracle.jdbc.driver.OracleDriver"
		url="jdbc:oracle:thin:@localhost:1521:xe"
		username="jsp"
		password="jsp"
		maxActiov="20" 
		maxIdle="20"
		maxWait="-1"
/>

작성 후 > web.xml >  </welcome-file-list> 아래쪽에

<resource-ref>
  	<description>Connection</description>
  	<res-ref-name>jdbc/oracle</res-ref-name>
  	<res-type>javax.sql.DataSource</res-type>
  	<res-auth>Container</res-auth>
  </resource-ref>

작성



 2. MyBatis  *************프로젝트 할 때 사용 ***********************
 	- 일종의 프레임워크

  2-1. MyBatis
	- 객체 지향 언어인 자바의 관계형 데이터베이스 프로그래밍을 좀 더 쉽게 할 수 있도록 도와주는 개발 프레임 워크
	- JDBC를 통해 데이터베이스에 액세스 하는 작업을 캡슐화 하고, 일반 SQL쿼리, 저장 프로시저 및 고급 매핑을 지원한다.
	- MyBatis 에서는 프로그램에 있는 SQL 쿼리들을 한 구성파일에 구성하여 프로그램 코드와 SQL을 분리 할 수 있는 장점을 가지고 있다.	
	- MyBatis 는 기존 JDBC 방식과 달리 SQL문을 XML 파일에 작성함으로 코드가 줄어들고 SQL문만 따로 관리하기 때문에 수정이 편해진다.

  2-2. 다운로드	
 blog.mybatis.org/p/products.html
>> MyBatis 3 > download >> mybatis-3.5.11.zip  다운

 -----------------------------패키지 생성후 XML파일 생성-------------------------


 2-3. MyBatis 결과 값
	- select
		성공 : select 문에 해당하는 결과
		실패 : error
	- insert
		성공 : 1 ( 여러건이여도 1)
		실패 : error
	- update
		성공 : update 된 행의 개수 반환 ( 없다면 0 )
		실패 : error
	- delete
		성공 : delete 된 행의 개수 반환 ( 없다면 0 )
		실패 : error






